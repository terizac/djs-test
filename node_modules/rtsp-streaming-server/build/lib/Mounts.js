"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mounts = void 0;

var _Mount = require("./Mount");

var _utils = require("./utils");

const debug = (0, _utils.getDebugger)('Mounts');

class Mounts {
  constructor(config) {
    this.mounts = {};
    this.rtpPorts = []; // It is assumed that each start port has a correlating end port of start+1

    for (let i = config.rtpPortStart; i < config.rtpPortStart + config.rtpPortCount; i = i + 2) {
      this.rtpPorts.push(i);
    }
  }

  getMount(uri) {
    let info = (0, _utils.getMountInfo)(uri);
    return this.mounts[info.path];
  }

  addMount(uri, sdp, hooks) {
    debug('Adding mount with path %s and SDP %O', uri, sdp);
    const info = (0, _utils.getMountInfo)(uri);
    const mount = new _Mount.Mount(this, info.path, sdp, hooks);
    this.mounts[info.path] = mount;
    return mount;
  }

  getNextRtpPort() {
    debug('%d rtp ports remaining', this.rtpPorts.length - 1);
    return this.rtpPorts.shift();
  }

  returnRtpPortToPool(port) {
    debug('%d rtp ports remaining', this.rtpPorts.length + 1);
    this.rtpPorts.push(port);
  }

  deleteMount(uri) {
    debug('Removing mount with path %s', uri);
    let info = (0, _utils.getMountInfo)(uri);
    const mount = this.mounts[info.path];

    if (mount) {
      const portsFreed = mount.close();
      this.rtpPorts = this.rtpPorts.concat(portsFreed);
      this.mounts[info.path] = undefined;
      delete this.mounts[info.path];
      return true;
    }

    return false;
  }

}

exports.Mounts = Mounts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvTW91bnRzLnRzIl0sIm5hbWVzIjpbImRlYnVnIiwiTW91bnRzIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJtb3VudHMiLCJydHBQb3J0cyIsImkiLCJydHBQb3J0U3RhcnQiLCJydHBQb3J0Q291bnQiLCJwdXNoIiwiZ2V0TW91bnQiLCJ1cmkiLCJpbmZvIiwicGF0aCIsImFkZE1vdW50Iiwic2RwIiwiaG9va3MiLCJtb3VudCIsIk1vdW50IiwiZ2V0TmV4dFJ0cFBvcnQiLCJsZW5ndGgiLCJzaGlmdCIsInJldHVyblJ0cFBvcnRUb1Bvb2wiLCJwb3J0IiwiZGVsZXRlTW91bnQiLCJwb3J0c0ZyZWVkIiwiY2xvc2UiLCJjb25jYXQiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFFQSxNQUFNQSxLQUFLLEdBQUcsd0JBQVksUUFBWixDQUFkOztBQU9PLE1BQU1DLE1BQU4sQ0FBYTtBQUlsQkMsRUFBQUEsV0FBVyxDQUFFQyxNQUFGLEVBQXdCO0FBQ2pDLFNBQUtDLE1BQUwsR0FBYyxFQUFkO0FBRUEsU0FBS0MsUUFBTCxHQUFnQixFQUFoQixDQUhpQyxDQUdiOztBQUVwQixTQUFLLElBQUlDLENBQUMsR0FBR0gsTUFBTSxDQUFDSSxZQUFwQixFQUFrQ0QsQ0FBQyxHQUFHSCxNQUFNLENBQUNJLFlBQVAsR0FBc0JKLE1BQU0sQ0FBQ0ssWUFBbkUsRUFBaUZGLENBQUMsR0FBR0EsQ0FBQyxHQUFHLENBQXpGLEVBQTRGO0FBQzFGLFdBQUtELFFBQUwsQ0FBY0ksSUFBZCxDQUFtQkgsQ0FBbkI7QUFDRDtBQUNGOztBQUVESSxFQUFBQSxRQUFRLENBQUVDLEdBQUYsRUFBZTtBQUNyQixRQUFJQyxJQUFJLEdBQUcseUJBQWFELEdBQWIsQ0FBWDtBQUVBLFdBQU8sS0FBS1AsTUFBTCxDQUFZUSxJQUFJLENBQUNDLElBQWpCLENBQVA7QUFDRDs7QUFFREMsRUFBQUEsUUFBUSxDQUFFSCxHQUFGLEVBQWVJLEdBQWYsRUFBNEJDLEtBQTVCLEVBQXFFO0FBQzNFaEIsSUFBQUEsS0FBSyxDQUFDLHNDQUFELEVBQXlDVyxHQUF6QyxFQUE4Q0ksR0FBOUMsQ0FBTDtBQUNBLFVBQU1ILElBQUksR0FBRyx5QkFBYUQsR0FBYixDQUFiO0FBQ0EsVUFBTU0sS0FBSyxHQUFHLElBQUlDLFlBQUosQ0FBVSxJQUFWLEVBQWdCTixJQUFJLENBQUNDLElBQXJCLEVBQTJCRSxHQUEzQixFQUFnQ0MsS0FBaEMsQ0FBZDtBQUNBLFNBQUtaLE1BQUwsQ0FBWVEsSUFBSSxDQUFDQyxJQUFqQixJQUF5QkksS0FBekI7QUFDQSxXQUFPQSxLQUFQO0FBQ0Q7O0FBRURFLEVBQUFBLGNBQWMsR0FBd0I7QUFDcENuQixJQUFBQSxLQUFLLENBQUMsd0JBQUQsRUFBMkIsS0FBS0ssUUFBTCxDQUFjZSxNQUFkLEdBQXVCLENBQWxELENBQUw7QUFDQSxXQUFPLEtBQUtmLFFBQUwsQ0FBY2dCLEtBQWQsRUFBUDtBQUNEOztBQUVEQyxFQUFBQSxtQkFBbUIsQ0FBRUMsSUFBRixFQUFzQjtBQUN2Q3ZCLElBQUFBLEtBQUssQ0FBQyx3QkFBRCxFQUEyQixLQUFLSyxRQUFMLENBQWNlLE1BQWQsR0FBdUIsQ0FBbEQsQ0FBTDtBQUNBLFNBQUtmLFFBQUwsQ0FBY0ksSUFBZCxDQUFtQmMsSUFBbkI7QUFDRDs7QUFFREMsRUFBQUEsV0FBVyxDQUFFYixHQUFGLEVBQXdCO0FBQ2pDWCxJQUFBQSxLQUFLLENBQUMsNkJBQUQsRUFBZ0NXLEdBQWhDLENBQUw7QUFDQSxRQUFJQyxJQUFJLEdBQUcseUJBQWFELEdBQWIsQ0FBWDtBQUVBLFVBQU1NLEtBQUssR0FBRyxLQUFLYixNQUFMLENBQVlRLElBQUksQ0FBQ0MsSUFBakIsQ0FBZDs7QUFDQSxRQUFJSSxLQUFKLEVBQVc7QUFDVCxZQUFNUSxVQUFVLEdBQUdSLEtBQUssQ0FBQ1MsS0FBTixFQUFuQjtBQUVBLFdBQUtyQixRQUFMLEdBQWdCLEtBQUtBLFFBQUwsQ0FBY3NCLE1BQWQsQ0FBcUJGLFVBQXJCLENBQWhCO0FBQ0EsV0FBS3JCLE1BQUwsQ0FBWVEsSUFBSSxDQUFDQyxJQUFqQixJQUF5QmUsU0FBekI7QUFDQSxhQUFPLEtBQUt4QixNQUFMLENBQVlRLElBQUksQ0FBQ0MsSUFBakIsQ0FBUDtBQUNBLGFBQU8sSUFBUDtBQUNEOztBQUVELFdBQU8sS0FBUDtBQUNEOztBQXJEaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb3VudCB9IGZyb20gJy4vTW91bnQnO1xuaW1wb3J0IHsgUHVibGlzaFNlcnZlckhvb2tzQ29uZmlnIH0gZnJvbSAnLi9QdWJsaXNoU2VydmVyJztcbmltcG9ydCB7IGdldERlYnVnZ2VyLCBnZXRNb3VudEluZm8gfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgZGVidWcgPSBnZXREZWJ1Z2dlcignTW91bnRzJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW91bnRzQ29uZmlnIHtcbiAgcnRwUG9ydENvdW50OiBudW1iZXI7XG4gIHJ0cFBvcnRTdGFydDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgTW91bnRzIHtcbiAgbW91bnRzOiB7IFtwYXRoOiBzdHJpbmddOiBNb3VudCB8IHVuZGVmaW5lZCB9O1xuICBydHBQb3J0czogbnVtYmVyW107XG5cbiAgY29uc3RydWN0b3IgKGNvbmZpZzogTW91bnRzQ29uZmlnKSB7XG4gICAgdGhpcy5tb3VudHMgPSB7fTtcblxuICAgIHRoaXMucnRwUG9ydHMgPSBbXTsgLy8gSXQgaXMgYXNzdW1lZCB0aGF0IGVhY2ggc3RhcnQgcG9ydCBoYXMgYSBjb3JyZWxhdGluZyBlbmQgcG9ydCBvZiBzdGFydCsxXG5cbiAgICBmb3IgKGxldCBpID0gY29uZmlnLnJ0cFBvcnRTdGFydDsgaSA8IGNvbmZpZy5ydHBQb3J0U3RhcnQgKyBjb25maWcucnRwUG9ydENvdW50OyBpID0gaSArIDIpIHtcbiAgICAgIHRoaXMucnRwUG9ydHMucHVzaChpKTtcbiAgICB9XG4gIH1cblxuICBnZXRNb3VudCAodXJpOiBzdHJpbmcpIHtcbiAgICBsZXQgaW5mbyA9IGdldE1vdW50SW5mbyh1cmkpO1xuXG4gICAgcmV0dXJuIHRoaXMubW91bnRzW2luZm8ucGF0aF07XG4gIH1cblxuICBhZGRNb3VudCAodXJpOiBzdHJpbmcsIHNkcDogc3RyaW5nLCBob29rcz86IFB1Ymxpc2hTZXJ2ZXJIb29rc0NvbmZpZyk6IE1vdW50IHtcbiAgICBkZWJ1ZygnQWRkaW5nIG1vdW50IHdpdGggcGF0aCAlcyBhbmQgU0RQICVPJywgdXJpLCBzZHApO1xuICAgIGNvbnN0IGluZm8gPSBnZXRNb3VudEluZm8odXJpKTtcbiAgICBjb25zdCBtb3VudCA9IG5ldyBNb3VudCh0aGlzLCBpbmZvLnBhdGgsIHNkcCwgaG9va3MpO1xuICAgIHRoaXMubW91bnRzW2luZm8ucGF0aF0gPSBtb3VudDtcbiAgICByZXR1cm4gbW91bnQ7XG4gIH1cblxuICBnZXROZXh0UnRwUG9ydCAoKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcbiAgICBkZWJ1ZygnJWQgcnRwIHBvcnRzIHJlbWFpbmluZycsIHRoaXMucnRwUG9ydHMubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIHRoaXMucnRwUG9ydHMuc2hpZnQoKTtcbiAgfVxuXG4gIHJldHVyblJ0cFBvcnRUb1Bvb2wgKHBvcnQ6IG51bWJlcik6IHZvaWQge1xuICAgIGRlYnVnKCclZCBydHAgcG9ydHMgcmVtYWluaW5nJywgdGhpcy5ydHBQb3J0cy5sZW5ndGggKyAxKTtcbiAgICB0aGlzLnJ0cFBvcnRzLnB1c2gocG9ydCk7XG4gIH1cblxuICBkZWxldGVNb3VudCAodXJpOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBkZWJ1ZygnUmVtb3ZpbmcgbW91bnQgd2l0aCBwYXRoICVzJywgdXJpKTtcbiAgICBsZXQgaW5mbyA9IGdldE1vdW50SW5mbyh1cmkpO1xuXG4gICAgY29uc3QgbW91bnQgPSB0aGlzLm1vdW50c1tpbmZvLnBhdGhdO1xuICAgIGlmIChtb3VudCkge1xuICAgICAgY29uc3QgcG9ydHNGcmVlZCA9IG1vdW50LmNsb3NlKCk7XG5cbiAgICAgIHRoaXMucnRwUG9ydHMgPSB0aGlzLnJ0cFBvcnRzLmNvbmNhdChwb3J0c0ZyZWVkKTtcbiAgICAgIHRoaXMubW91bnRzW2luZm8ucGF0aF0gPSB1bmRlZmluZWQ7XG4gICAgICBkZWxldGUgdGhpcy5tb3VudHNbaW5mby5wYXRoXTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG59XG4iXX0=