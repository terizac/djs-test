"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Client = void 0;

var _dgram = require("dgram");

var _uuid = require("uuid");

var _utils = require("./utils");

const debug = (0, _utils.getDebugger)('Client');
const clientPortRegex = /(?:client_port=)(\d*)-(\d*)/;

class Client {
  constructor(mount, req) {
    this.open = true;
    this.id = (0, _uuid.v4)();
    const info = (0, _utils.getMountInfo)(req.uri);
    this.mount = mount;

    if (this.mount.path !== info.path) {
      throw new Error('Mount does not equal request provided');
    }

    this.stream = this.mount.streams[info.streamId];

    if (!req.socket.remoteAddress || !req.headers.transport) {
      throw new Error('No remote address found or transport header doesn\'t exist');
    }

    const portMatch = req.headers.transport.match(clientPortRegex);
    this.remoteAddress = req.socket.remoteAddress.replace('::ffff:', ''); // Strip IPv6 thing out

    if (!portMatch) {
      throw new Error('Unable to find client ports in transport header');
    }

    this.remoteRtpPort = parseInt(portMatch[1], 10);
    this.remoteRtcpPort = parseInt(portMatch[2], 10);
    this.setupServerPorts();
    this.rtpServer = (0, _dgram.createSocket)('udp4');
    this.rtcpServer = (0, _dgram.createSocket)('udp4');
  }
  /**
   *
   * @param req
   */


  async setup(req) {
    let portError = false;

    try {
      await this.listen();
    } catch (e) {
      // One or two of the ports was in use, cycle them out and try another
      if (e.errno && e.errno === 'EADDRINUSE') {
        console.warn(`Port error on ${e.port}, for stream ${this.stream.id} using another port`);
        portError = true;

        try {
          await this.rtpServer.close();
          await this.rtcpServer.close();
        } catch (e) {
          // Ignore, dont care if couldnt close
          console.warn(e);
        }

        if (this.rtpServerPort) {
          this.mount.mounts.returnRtpPortToPool(this.rtpServerPort);
        }

        this.setupServerPorts();
      } else {
        throw e;
      }
    }

    if (portError) {
      return this.setup(req);
    }

    debug('%s:%s Client set up for path %s, local ports (%s:%s) remote ports (%s:%s)', req.socket.remoteAddress, req.socket.remotePort, this.stream.mount.path, this.rtpServerPort, this.rtcpServerPort, this.remoteRtpPort, this.remoteRtcpPort);
  }
  /**
   *
   */


  play() {
    this.stream.clients[this.id] = this;
  }
  /**
   *
   */


  async close() {
    this.open = false;
    this.mount.clientLeave(this);
    return new Promise(resolve => {
      // Sometimes closing can throw if the dgram has already gone away. Just ignore it.
      try {
        this.rtpServer.close();
      } catch (e) {
        debug('Error closing rtpServer for client %o', e);
      }

      try {
        this.rtcpServer.close();
      } catch (e) {
        debug('Error closing rtcpServer for client %o', e);
      }

      if (this.rtpServerPort) {
        this.mount.mounts.returnRtpPortToPool(this.rtpServerPort);
      }

      return resolve();
    });
  }
  /**
   *
   * @param buf
   */


  sendRtp(buf) {
    if (this.open === true) {
      this.rtpServer.send(buf, this.remoteRtpPort, this.remoteAddress);
    }
  }
  /**
   *
   * @param buf
   */


  sendRtcp(buf) {
    if (this.open === true) {
      this.rtcpServer.send(buf, this.remoteRtcpPort, this.remoteAddress);
    }
  }
  /**
   *
   */


  async listen() {
    return new Promise((resolve, reject) => {
      function onError(err) {
        return reject(err);
      }

      this.rtpServer.on('error', onError);
      this.rtpServer.bind(this.rtpServerPort, () => {
        this.rtpServer.removeListener('error', onError);
        this.rtcpServer.on('error', onError);
        this.rtcpServer.bind(this.rtcpServerPort, () => {
          this.rtcpServer.removeListener('error', onError);
          return resolve();
        });
      });
    });
  }

  setupServerPorts() {
    const rtpServerPort = this.mount.mounts.getNextRtpPort();

    if (!rtpServerPort) {
      throw new Error('Unable to get next RTP Server Port');
    }

    this.rtpServerPort = rtpServerPort;
    this.rtcpServerPort = this.rtpServerPort + 1;
  }

}

exports.Client = Client;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,